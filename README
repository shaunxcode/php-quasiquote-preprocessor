php quasiquote preprocessor does what it says on the tin. In theory you would use this in a framework which would keep track of the preprocessed source files but it can also be used at the command line. 

This obviously would conflict with the use of ` for shell commands, but really if you are of such a persuasion "these aren't the quotes you are looking for".

Beyond standard quasiquote/unquote/unquote-splicing functionality some other sugar is provided. i.e. dict creation:

$people = `(
	shaun: (
		class: person
		pets: (
			tofu: (class: cat color: white)
			abby: (class: dog color: (black white))
			schnitzel: (class: dog color: (brown black))))
	daena: (
		class: person
		pets: (
			cordelia: (class: cat color: black)
			margret: (class: cat color: orange))))

yields:

$people = array(
	'shaun' => array(
		'class' => 'person',
		'pets' => array(
			'tofu' => array('class' => 'cat', 'color' => 'white'),
			'abby' => array('class' => 'dog', 'color' => array('black', 'white')),
			'schnitzel' => array('class' => 'dog', 'color' => array('brown', 'black')))),
	'daena' => array(
		'class' => 'person', 
		'pets' => array(
			'cordelia' => array('class' => 'cat', 'color' => 'black'),
			'margret' => array('class' => 'cat', 'color' => 'orange'))));

as you can infer an assumption is made that any "bare word" becomes a string. Floats/numbers are treated numerically and strings are also allowed i.e. 

$names = `('timmy mcolours' 67.50 sammy peter 300 'walter jensen');

yields:

$names = array('timmy mcolours', 67.50, 'sammy', 'peter', 300, 'walter jensen');

The real fun starts when you start unquoting and unquotesplicing:

$x = `(a b c);
$z = 300;
$q = `(1 2 3 ,@x ,z ,$z ,@$x);

yields:

$x = array('a', 'b', 'c');
$z = 300;
$q = arraySplice(arraySplice(array('1', '2', '3', null, $z, $z, null), 6, 1, $x), 3, 1, $x);

Obviously not something you would want to write yourself (if you value your sanity) - and I feel it is the cause of a lot of bad php code out there in the form of looping over arrays to change their structure rather than using array_splice expressions. Wait array_splice can't be used functionally because it expects a reference thus the arraySplice wrapper function that allows life to carry on. 

Also demonstrated above is the fact that unquote/unquotesplice can handle variables with or without a $ prefix. A future feature I am working on is the ability to allow expressions inline w/ { } i.e. 

$x = `(1 2 ,{1 + 2} ,@{$obj->method($arg, `(sub quasi expression))});

This should be relatively trivial actually but is not a direct requirement for me right now.
